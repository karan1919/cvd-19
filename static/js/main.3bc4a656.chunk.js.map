{"version":3,"sources":["api/index.js","components/common/ThemeButton.jsx","components/Header.jsx","components/common/Card.jsx","components/CardStack.jsx","utils/backgroundColor.js","components/CountryPicker.jsx","utils/formatNumber.js","components/common/LineChartTooltip.jsx","components/LineChart.jsx","components/common/PieChartTooltip.jsx","components/PieChart.jsx","components/DisplayChart.jsx","App.js","index.js"],"names":["url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","ThemeButton","useColorMode","colorMode","toggleColorMode","Tooltip","label","placement","closeOnClick","Button","onClick","marginTop","marginLeft","Icon","renderIcon","Header","Text","as","fontSize","marginBottom","renderHeader","Card","items","Stack","spacing","item","Box","key","title","p","borderWidth","rounded","value","CardStack","Spinner","size","cardItems","toLocaleString","backgroundColor","styles","darkBackgorundColor","lightBackgroundColor","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","Select","variant","onChange","e","target","style","i","formatNumber","number","Intl","NumberFormat","maximumFractionDigits","notation","compactDisplay","format","padding","border","LineChartTooltip","active","payload","className","LineChartt","length","width","height","type","dataKey","stroke","strokeDasharray","nameKey","tickFormatter","content","PieChartTooltip","PieChartt","pieChartData","COLORS","color","cx","cy","outerRadius","fill","entry","index","DisplayChart","setDailyData","PieChart","LineChart","App","state","fetchedData","setState","this","ThemeProvider","ColorModeProvider","CSSReset","Flex","align","justifyContent","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bc4a656.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Button, Icon, useColorMode, Tooltip } from \"@chakra-ui/core\";\r\n\r\nconst ThemeButton = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const renderIcon = (colorMode) => {\r\n    if (colorMode === \"light\") return <Icon name=\"moon\" />;\r\n    return <Icon name=\"sun\" />;\r\n  };\r\n\r\n  return (\r\n    <Tooltip label=\"Change theme\" placement=\"right-end\" closeOnClick>\r\n      <Button onClick={toggleColorMode} marginTop={6} marginLeft={6}>\r\n        {renderIcon(colorMode)}\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default ThemeButton;\r\n","import React from \"react\";\r\nimport { Text } from \"@chakra-ui/core\";\r\n\r\nconst Header = ({ country }) => {\r\n  const renderHeader = (country) => {\r\n    if (country) return country;\r\n    return \"Global\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"b\" fontSize=\"xl\" marginBottom={6}>\r\n        {renderHeader(country)}\r\n      </Text>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Text, Box, Stack } from \"@chakra-ui/core\";\r\n\r\nconst Card = ({ items }) => {\r\n  return (\r\n    <>\r\n      <Stack spacing={6}>\r\n        {items.map((item) => (\r\n          <Box key={item.title} p={4} borderWidth=\"3px\" rounded=\"lg\">\r\n            <Text as=\"b\">{item.title}</Text>\r\n            <br />\r\n            <Text>{item.value}</Text>\r\n          </Box>\r\n        ))}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Spinner } from \"@chakra-ui/core\";\r\nimport Card from \"./common/Card\";\r\n\r\nconst CardStack = ({ data: { confirmed, recovered, deaths } }) => {\r\n  if (!confirmed) {\r\n    return <Spinner size=\"lg\" />;\r\n  }\r\n\r\n  const cardItems = [\r\n    { title: \"Confirmed\", value: confirmed.value.toLocaleString() },\r\n    { title: \"Recovered\", value: recovered.value.toLocaleString() },\r\n    { title: \"Deaths\", value: deaths.value.toLocaleString() },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card items={cardItems} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardStack;\r\n","export const backgroundColor = (colorMode, styles) => {\r\n  const darkBackgorundColor = { backgroundColor: \"#1A202C\" };\r\n  const lightBackgroundColor = { backgroundColor: \"#fff\" };\r\n  if (styles) {\r\n    if (colorMode === \"dark\") return { ...darkBackgorundColor, ...styles };\r\n    return { ...lightBackgroundColor, ...styles };\r\n  } else {\r\n    if (colorMode === \"dark\") return { ...darkBackgorundColor };\r\n    return { ...lightBackgroundColor };\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchCountries } from \"../api\";\r\nimport { backgroundColor } from \"../utils/backgroundColor\";\r\nimport { Select, Tooltip, useColorMode } from \"@chakra-ui/core\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  const { colorMode } = useColorMode();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <>\r\n      <Tooltip label=\"Select country\" placement=\"auto\" closeOnClick>\r\n        <Select\r\n          variant=\"filled\"\r\n          marginTop={8}\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n        >\r\n          <option value=\"\" style={backgroundColor(colorMode)}>\r\n            Global\r\n          </option>\r\n          {fetchedCountries.map((country, i) => (\r\n            <option key={i} value={country} style={backgroundColor(colorMode)}>\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </Tooltip>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","export const formatNumber = (number) => {\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    maximumFractionDigits: 1,\r\n    notation: \"compact\",\r\n    compactDisplay: \"short\",\r\n  }).format(number);\r\n};\r\n","import React from \"react\";\r\nimport { useColorMode } from \"@chakra-ui/core\";\r\nimport { formatNumber } from \"../../utils/formatNumber\";\r\nimport { backgroundColor } from \"../../utils/backgroundColor\";\r\n\r\nconst styles = { padding: \"5px\", border: \"1px solid #cccc\" };\r\n\r\nconst LineChartTooltip = ({ active, payload, label }) => {\r\n  const { colorMode } = useColorMode();\r\n  if (active) {\r\n    return (\r\n      <div\r\n        className=\"custom-tooltip\"\r\n        style={backgroundColor(colorMode, styles)}\r\n      >\r\n        <label>{`${label}`}</label>\r\n        <br />\r\n        <label>{`${payload[0].name} : ${formatNumber(\r\n          payload[0].value\r\n        )}`}</label>\r\n        <br />\r\n        <label>{`${payload[1].name} : ${formatNumber(\r\n          payload[1].value\r\n        )}`}</label>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default LineChartTooltip;\r\n","import React from \"react\";\r\nimport LineChartTooltip from \"./common/LineChartTooltip\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { formatNumber } from \"../utils/formatNumber\";\r\n\r\nconst LineChartt = ({ data }) => {\r\n  return (\r\n    data.length && (\r\n      <>\r\n        <LineChart width={500} height={300} data={data}>\r\n          <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"green\" />\r\n          <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"red\" />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"1 1\" />\r\n          <XAxis dataKey=\"date\" nameKey=\"date\" />\r\n          <YAxis\r\n            dataKey=\"confirmed\"\r\n            nameKey=\"confirmed\"\r\n            tickFormatter={formatNumber}\r\n          />\r\n          <Tooltip content={<LineChartTooltip />} />\r\n          <Legend />\r\n        </LineChart>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nexport default LineChartt;\r\n","import React from \"react\";\r\nimport { useColorMode } from \"@chakra-ui/core\";\r\nimport { formatNumber } from \"../../utils/formatNumber\";\r\nimport { backgroundColor } from \"../../utils/backgroundColor\";\r\n\r\nconst styles = { padding: \"5px\", border: \"1px solid #cccc\" };\r\n\r\nconst PieChartTooltip = ({ active, payload }) => {\r\n  const { colorMode } = useColorMode();\r\n  if (active) {\r\n    return (\r\n      <div\r\n        className=\"custom-tooltip\"\r\n        style={backgroundColor(colorMode, styles)}\r\n      >\r\n        <label>{`${payload[0].name} : ${formatNumber(\r\n          payload[0].value\r\n        )}`}</label>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default PieChartTooltip;\r\n","import React from \"react\";\r\nimport PieChartTooltip from \"./common/PieChartTooltip\";\r\nimport { Tooltip, Legend, PieChart, Pie, Cell } from \"recharts\";\r\n\r\nconst PieChartt = ({ confirmed, recovered, deaths }) => {\r\n  const pieChartData = [\r\n    { name: \"confirmed\", value: confirmed.value },\r\n    { name: \"recovered\", value: recovered.value },\r\n    { name: \"deaths\", value: deaths.value },\r\n  ];\r\n\r\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#AF19FF\"];\r\n  return (\r\n    <>\r\n      {confirmed ? (\r\n        <PieChart width={500} height={300}>\r\n          <Pie\r\n            data={pieChartData}\r\n            color=\"#000000\"\r\n            dataKey=\"value\"\r\n            nameKey=\"name\"\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={100}\r\n            fill=\"#8884d8\"\r\n          >\r\n            {pieChartData.map((entry, index) => (\r\n              <Cell\r\n                key={`cell-${index}`}\r\n                fill={COLORS[index % COLORS.length]}\r\n              />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip content={<PieChartTooltip />} />\r\n          <Legend />\r\n        </PieChart>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PieChartt;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { fetchDailyData } from \"../api\";\r\nimport LineChartt from \"./LineChart\";\r\nimport PieChartt from \"./PieChart\";\r\nimport { Box } from \"@chakra-ui/core\";\r\n\r\nconst DisplayChart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <Box marginTop={8}>\r\n      {country ? (\r\n        <PieChartt\r\n          confirmed={confirmed}\r\n          recovered={recovered}\r\n          deaths={deaths}\r\n        />\r\n      ) : (\r\n        <LineChartt data={dailyData} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DisplayChart;\r\n","import React, { Component } from \"react\";\nimport { fetchData } from \"./api\";\nimport ThemeButton from \"./components/common/ThemeButton\";\nimport Header from \"./components/Header\";\nimport CardStack from \"./components/CardStack\";\nimport CountryPicker from \"./components/CountryPicker\";\nimport DisplayChart from \"./components/DisplayChart\";\nimport {\n  ThemeProvider,\n  CSSReset,\n  ColorModeProvider,\n  Flex,\n  Stack,\n} from \"@chakra-ui/core\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <>\n        <ThemeProvider>\n          <ColorModeProvider>\n            <CSSReset />\n            <ThemeButton />\n            <Flex align=\"center\" justifyContent=\"center\" marginTop={12}>\n              <Stack>\n                <Header country={country} />\n                <CardStack data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <DisplayChart data={data} country={country} />\n              </Stack>\n            </Flex>\n          </ColorModeProvider>\n        </ThemeProvider>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}